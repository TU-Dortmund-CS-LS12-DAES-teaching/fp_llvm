; ModuleID = 'src/fir.c'
source_filename = "src/fir.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@fir_int = dso_local global [36 x i64] [i64 4294967294, i64 1, i64 4, i64 3, i64 4294967294, i64 4294967292, i64 2, i64 7, i64 0, i64 4294967287, i64 4294967292, i64 12, i64 11, i64 4294967282, i64 4294967270, i64 15, i64 89, i64 127, i64 89, i64 15, i64 4294967270, i64 4294967282, i64 11, i64 12, i64 4294967292, i64 4294967287, i64 0, i64 7, i64 2, i64 4294967292, i64 4294967294, i64 3, i64 4, i64 1, i64 4294967294, i64 0], align 16
@in_data = dso_local global [701 x i64] [i64 0, i64 0, i64 0, i64 0, i64 127, i64 121, i64 114, i64 121, i64 13, i64 13, i64 0, i64 3, i64 5, i64 2, i64 3, i64 127, i64 127, i64 2, i64 126, i64 0, i64 1, i64 126, i64 1, i64 1, i64 127, i64 0, i64 127, i64 0, i64 2, i64 1, i64 1, i64 3, i64 1, i64 127, i64 1, i64 0, i64 1, i64 1, i64 125, i64 123, i64 115, i64 106, i64 119, i64 16, i64 14, i64 1, i64 5, i64 5, i64 5, i64 5, i64 125, i64 0, i64 2, i64 125, i64 0, i64 0, i64 126, i64 1, i64 126, i64 127, i64 3, i64 124, i64 126, i64 6, i64 0, i64 126, i64 3, i64 2, i64 127, i64 126, i64 127, i64 2, i64 1, i64 127, i64 1, i64 1, i64 0, i64 3, i64 0, i64 127, i64 2, i64 0, i64 127, i64 3, i64 1, i64 0, i64 0, i64 125, i64 0, i64 3, i64 0, i64 126, i64 127, i64 2, i64 1, i64 126, i64 0, i64 3, i64 127, i64 125, i64 1, i64 1, i64 1, i64 127, i64 0, i64 5, i64 0, i64 127, i64 2, i64 126, i64 127, i64 2, i64 1, i64 0, i64 126, i64 0, i64 5, i64 0, i64 127, i64 0, i64 126, i64 1, i64 0, i64 125, i64 1, i64 3, i64 127, i64 0, i64 0, i64 126, i64 2, i64 3, i64 126, i64 125, i64 114, i64 104, i64 113, i64 5, i64 12, i64 7, i64 2, i64 6, i64 13, i64 5, i64 125, i64 3, i64 2, i64 127, i64 0, i64 121, i64 122, i64 3, i64 126, i64 125, i64 0, i64 125, i64 2, i64 1, i64 125, i64 8, i64 3, i64 124, i64 6, i64 0, i64 122, i64 6, i64 2, i64 124, i64 3, i64 126, i64 121, i64 6, i64 5, i64 116, i64 127, i64 13, i64 122, i64 120, i64 6, i64 5, i64 1, i64 0, i64 125, i64 1, i64 4, i64 124, i64 127, i64 3, i64 127, i64 5, i64 3, i64 122, i64 6, i64 10, i64 118, i64 124, i64 10, i64 124, i64 127, i64 6, i64 121, i64 3, i64 12, i64 117, i64 120, i64 10, i64 0, i64 121, i64 3, i64 126, i64 124, i64 6, i64 0, i64 121, i64 2, i64 126, i64 127, i64 6, i64 118, i64 127, i64 13, i64 121, i64 127, i64 6, i64 121, i64 6, i64 3, i64 113, i64 6, i64 10, i64 115, i64 127, i64 10, i64 0, i64 127, i64 122, i64 124, i64 10, i64 0, i64 117, i64 127, i64 12, i64 10, i64 124, i64 121, i64 9, i64 13, i64 125, i64 122, i64 5, i64 11, i64 10, i64 121, i64 124, i64 22, i64 3, i64 114, i64 13, i64 7, i64 121, i64 12, i64 7, i64 122, i64 11, i64 7, i64 122, i64 10, i64 7, i64 121, i64 10, i64 5, i64 117, i64 6, i64 5, i64 121, i64 5, i64 6, i64 1, i64 6, i64 0, i64 122, i64 2, i64 7, i64 3, i64 125, i64 1, i64 10, i64 7, i64 2, i64 127, i64 127, i64 9, i64 7, i64 121, i64 121, i64 6, i64 8, i64 125, i64 122, i64 6, i64 12, i64 6, i64 125, i64 127, i64 13, i64 7, i64 121, i64 1, i64 6, i64 127, i64 127, i64 2, i64 3, i64 1, i64 126, i64 1, i64 1, i64 125, i64 1, i64 0, i64 125, i64 6, i64 3, i64 125, i64 5, i64 7, i64 127, i64 124, i64 1, i64 6, i64 6, i64 124, i64 122, i64 7, i64 10, i64 0, i64 120, i64 1, i64 8, i64 0, i64 121, i64 122, i64 4, i64 10, i64 0, i64 120, i64 1, i64 6, i64 122, i64 117, i64 122, i64 0, i64 0, i64 121, i64 118, i64 127, i64 7, i64 0, i64 122, i64 125, i64 2, i64 4, i64 124, i64 122, i64 2, i64 5, i64 124, i64 122, i64 125, i64 127, i64 0, i64 120, i64 117, i64 127, i64 0, i64 121, i64 120, i64 121, i64 1, i64 3, i64 121, i64 121, i64 0, i64 0, i64 127, i64 127, i64 121, i64 127, i64 2, i64 122, i64 124, i64 125, i64 124, i64 127, i64 125, i64 121, i64 125, i64 0, i64 121, i64 122, i64 124, i64 125, i64 0, i64 125, i64 125, i64 0, i64 0, i64 0, i64 0, i64 125, i64 125, i64 0, i64 125, i64 126, i64 0, i64 126, i64 3, i64 3, i64 125, i64 1, i64 5, i64 0, i64 126, i64 125, i64 127, i64 3, i64 125, i64 121, i64 1, i64 2, i64 125, i64 127, i64 1, i64 0, i64 0, i64 127, i64 127, i64 126, i64 127, i64 0, i64 127, i64 0, i64 124, i64 125, i64 0, i64 121, i64 120, i64 124, i64 124, i64 123, i64 123, i64 125, i64 127, i64 0, i64 0, i64 127, i64 0, i64 1, i64 2, i64 0, i64 127, i64 0, i64 0, i64 0, i64 127, i64 126, i64 0, i64 0, i64 127, i64 0, i64 2, i64 1, i64 2, i64 6, i64 5, i64 3, i64 6, i64 8, i64 5, i64 2, i64 1, i64 1, i64 3, i64 0, i64 125, i64 127, i64 0, i64 127, i64 126, i64 0, i64 2, i64 3, i64 2, i64 1, i64 2, i64 3, i64 1, i64 124, i64 125, i64 0, i64 0, i64 126, i64 124, i64 127, i64 1, i64 0, i64 126, i64 124, i64 127, i64 1, i64 0, i64 126, i64 127, i64 2, i64 3, i64 1, i64 0, i64 4, i64 6, i64 5, i64 6, i64 7, i64 10, i64 10, i64 4, i64 2, i64 5, i64 8, i64 9, i64 8, i64 7, i64 12, i64 20, i64 20, i64 16, i64 14, i64 20, i64 21, i64 15, i64 9, i64 7, i64 4, i64 126, i64 118, i64 100, i64 65, i64 72, i64 125, i64 108, i64 61, i64 103, i64 16, i64 6, i64 125, i64 117, i64 7, i64 29, i64 0, i64 108, i64 2, i64 125, i64 120, i64 119, i64 111, i64 119, i64 1, i64 0, i64 2, i64 7, i64 10, i64 28, i64 28, i64 23, i64 35, i64 47, i64 65, i64 67, i64 79, i64 85, i64 88, i64 126, i64 2, i64 76, i64 16, i64 105, i64 44, i64 13, i64 116, i64 42, i64 116, i64 99, i64 41, i64 124, i64 94, i64 33, i64 53, i64 70, i64 36, i64 103, i64 53, i64 60, i64 60, i64 38, i64 38, i64 47, i64 71, i64 100, i64 4, i64 19, i64 24, i64 39, i64 43, i64 48, i64 27, i64 127, i64 120, i64 114, i64 104, i64 92, i64 90, i64 104, i64 124, i64 3, i64 13, i64 38, i64 65, i64 81, i64 90, i64 106, i64 108, i64 84, i64 120, i64 9, i64 69, i64 121, i64 31, i64 11, i64 46, i64 96, i64 11, i64 102, i64 127, i64 104, i64 119, i64 78, i64 70, i64 74, i64 59, i64 18, i64 91, i64 55, i64 49, i64 33, i64 11, i64 18, i64 46, i64 87, i64 126, i64 25, i64 34, i64 43, i64 63, i64 58, i64 37, i64 11, i64 121, i64 113, i64 104, i64 97, i64 92, i64 102, i64 114, i64 6, i64 22, i64 41, i64 65, i64 94, i64 109, i64 102, i64 96, i64 110, i64 23, i64 72, i64 54, i64 18, i64 23, i64 47, i64 99, i64 120, i64 92, i64 119, i64 108, i64 117, i64 65, i64 73, i64 79, i64 59, i64 11, i64 84, i64 55, i64 0], align 16
@out_data = dso_local global <{ [700 x i64], [20 x i64] }> <{ [700 x i64] [i64 3, i64 4294967290, i64 4294967293, i64 29, i64 88, i64 137, i64 135, i64 86, i64 32, i64 7, i64 7, i64 4, i64 4294967289, i64 0, i64 40, i64 91, i64 107, i64 79, i64 43, i64 33, i64 45, i64 48, i64 39, i64 39, i64 55, i64 71, i64 66, i64 39, i64 8, i64 4294967284, i64 4294967285, i64 13, i64 46, i64 59, i64 37, i64 0, i64 4294967288, i64 29, i64 89, i64 131, i64 135, i64 111, i64 78, i64 47, i64 18, i64 4294967295, i64 4294967291, i64 4, i64 21, i64 35, i64 45, i64 49, i64 47, i64 41, i64 38, i64 42, i64 54, i64 72, i64 88, i64 95, i64 90, i64 79, i64 70, i64 65, i64 50, i64 27, i64 23, i64 55, i64 105, i64 123, i64 89, i64 47, i64 36, i64 48, i64 42, i64 8, i64 4294967286, i64 7, i64 36, i64 49, i64 47, i64 51, i64 50, i64 30, i64 4, i64 7, i64 35, i64 51, i64 33, i64 14, i64 30, i64 74, i64 97, i64 75, i64 33, i64 14, i64 34, i64 73, i64 94, i64 77, i64 37, i64 11, i64 24, i64 50, i64 51, i64 21, i64 5, i64 41, i64 100, i64 118, i64 77, i64 22, i64 9, i64 38, i64 55, i64 35, i64 11, i64 21, i64 60, i64 82, i64 64, i64 35, i64 29, i64 45, i64 54, i64 45, i64 36, i64 41, i64 50, i64 44, i64 33, i64 43, i64 80, i64 123, i64 141, i64 115, i64 71, i64 34, i64 15, i64 7, i64 4294967295, i64 0, i64 19, i64 45, i64 54, i64 43, i64 35, i64 50, i64 78, i64 92, i64 85, i64 79, i64 85, i64 92, i64 80, i64 52, i64 32, i64 34, i64 50, i64 56, i64 47, i64 37, i64 42, i64 53, i64 50, i64 35, i64 31, i64 54, i64 87, i64 96, i64 76, i64 49, i64 45, i64 64, i64 87, i64 103, i64 103, i64 76, i64 33, i64 4, i64 8, i64 32, i64 48, i64 44, i64 51, i64 78, i64 97, i64 86, i64 57, i64 38, i64 38, i64 43, i64 46, i64 56, i64 74, i64 87, i64 88, i64 92, i64 95, i64 80, i64 49, i64 29, i64 49, i64 88, i64 93, i64 55, i64 22, i64 35, i64 85, i64 113, i64 86, i64 40, i64 24, i64 48, i64 81, i64 96, i64 92, i64 82, i64 79, i64 84, i64 94, i64 98, i64 87, i64 69, i64 58, i64 53, i64 38, i64 23, i64 35, i64 71, i64 93, i64 72, i64 39, i64 48, i64 97, i64 121, i64 90, i64 49, i64 45, i64 69, i64 79, i64 65, i64 62, i64 72, i64 72, i64 58, i64 61, i64 83, i64 85, i64 47, i64 13, i64 31, i64 85, i64 105, i64 71, i64 30, i64 28, i64 50, i64 60, i64 49, i64 40, i64 45, i64 52, i64 50, i64 46, i64 46, i64 47, i64 45, i64 47, i64 50, i64 47, i64 38, i64 35, i64 48, i64 61, i64 44, i64 3, i64 4294967279, i64 10, i64 52, i64 57, i64 24, i64 10, i64 40, i64 66, i64 40, i64 4294967291, i64 4294967294, i64 55, i64 97, i64 83, i64 50, i64 53, i64 75, i64 76, i64 54, i64 54, i64 78, i64 86, i64 51, i64 14, i64 27, i64 78, i64 105, i64 81, i64 34, i64 13, i64 36, i64 75, i64 94, i64 77, i64 42, i64 18, i64 22, i64 41, i64 53, i64 51, i64 42, i64 37, i64 38, i64 47, i64 56, i64 49, i64 29, i64 29, i64 66, i64 104, i64 88, i64 26, i64 4294967295, i64 42, i64 99, i64 95, i64 39, i64 10, i64 34, i64 52, i64 30, i64 11, i64 39, i64 88, i64 90, i64 46, i64 16, i64 27, i64 40, i64 35, i64 49, i64 96, i64 124, i64 86, i64 27, i64 29, i64 93, i64 129, i64 92, i64 41, i64 44, i64 78, i64 81, i64 53, i64 51, i64 77, i64 83, i64 50, i64 36, i64 80, i64 134, i64 133, i64 90, i64 70, i64 93, i64 107, i64 91, i64 79, i64 99, i64 113, i64 84, i64 42, i64 44, i64 80, i64 86, i64 48, i64 30, i64 77, i64 141, i64 144, i64 91, i64 58, i64 85, i64 128, i64 137, i64 120, i64 123, i64 138, i64 125, i64 83, i64 62, i64 91, i64 131, i64 127, i64 89, i64 74, i64 91, i64 94, i64 46, i64 4294967284, i64 4294967283, i64 45, i64 95, i64 97, i64 80, i64 84, i64 94, i64 80, i64 48, i64 38, i64 52, i64 50, i64 24, i64 9, i64 39, i64 91, i64 116, i64 109, i64 94, i64 82, i64 64, i64 45, i64 52, i64 84, i64 92, i64 49, i64 0, i64 10, i64 86, i64 156, i64 150, i64 89, i64 46, i64 56, i64 87, i64 94, i64 75, i64 70, i64 94, i64 120, i64 124, i64 119, i64 128, i64 141, i64 125, i64 79, i64 43, i64 43, i64 51, i64 30, i64 0, i64 6, i64 40, i64 55, i64 29, i64 9, i64 36, i64 83, i64 93, i64 61, i64 31, i64 33, i64 41, i64 24, i64 4294967292, i64 4294967285, i64 6, i64 18, i64 9, i64 4294967293, i64 1, i64 15, i64 12, i64 4294967290, i64 4294967282, i64 9, i64 50, i64 77, i64 86, i64 92, i64 98, i64 83, i64 39, i64 0, i64 4294967292, i64 12, i64 8, i64 4294967280, i64 4294967289, i64 54, i64 106, i64 85, i64 28, i64 27, i64 96, i64 142, i64 97, i64 21, i64 20, i64 94, i64 140, i64 97, i64 29, i64 26, i64 82, i64 107, i64 61, i64 4294967291, i64 4294967272, i64 1, i64 21, i64 12, i64 4294967294, i64 0, i64 13, i64 17, i64 9, i64 1, i64 1, i64 7, i64 12, i64 11, i64 7, i64 6, i64 13, i64 22, i64 23, i64 16, i64 12, i64 19, i64 28, i64 19, i64 0, i64 0, i64 38, i64 95, i64 123, i64 104, i64 72, i64 72, i64 104, i64 125, i64 96, i64 45, i64 25, i64 55, i64 92, i64 90, i64 49, i64 15, i64 19, i64 49, i64 76, i64 94, i64 113, i64 131, i64 127, i64 88, i64 32, i64 4294967293, i64 4294967288, i64 9, i64 24, i64 25, i64 22, i64 25, i64 39, i64 55, i64 61, i64 66, i64 79, i64 98, i64 101, i64 79, i64 51, i64 44, i64 54, i64 61, i64 56, i64 52, i64 64, i64 84, i64 93, i64 91, i64 88, i64 89, i64 83, i64 65, i64 50, i64 51, i64 63, i64 74, i64 75, i64 67, i64 51, i64 37, i64 40, i64 61, i64 79, i64 68, i64 35, i64 14, i64 22, i64 41, i64 44, i64 40, i64 57, i64 99, i64 132, i64 125, i64 95, i64 86, i64 105, i64 115, i64 86, i64 36, i64 12, i64 30, i64 64, i64 86, i64 96, i64 105, i64 110, i64 99, i64 78, i64 66, i64 68, i64 71, i64 59, i64 42, i64 34, i64 45, i64 69, i64 93, i64 112, i64 119, i64 109, i64 91, i64 74, i64 63, i64 55, i64 50, i64 57, i64 67, i64 61, i64 32, i64 5, i64 16, i64 63, i64 100, i64 90, i64 52, i64 33, i64 46, i64 62, i64 51, i64 34, i64 48, i64 89, i64 117, i64 113, i64 96, i64 97, i64 103, i64 85, i64 45, i64 18, i64 29, i64 67, i64 101, i64 113, i64 108, i64 95, i64 83, i64 71, i64 57, i64 41, i64 28, i64 30, i64 53, i64 86, i64 111, i64 116, i64 111, i64 106, i64 102, i64 92, i64 75, i64 58, i64 51, i64 54, i64 56, i64 44], [20 x i64] zeroinitializer }>, align 16

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [720 x i64], align 16
  store i32 0, i32* %1, align 4
  %3 = getelementptr inbounds [720 x i64], [720 x i64]* %2, i64 0, i64 0
  call void @fir_filter_int(i64* noundef getelementptr inbounds ([701 x i64], [701 x i64]* @in_data, i64 0, i64 0), i64* noundef %3, i64 noundef 700, i64* noundef getelementptr inbounds ([36 x i64], [36 x i64]* @fir_int, i64 0, i64 0), i64 noundef 35, i64 noundef 285)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @fir_filter_int(i64* noundef %0, i64* noundef %1, i64 noundef %2, i64* noundef %3, i64 noundef %4, i64 noundef %5) #0 {
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64*, align 8
  %19 = alloca i64*, align 8
  %20 = alloca i64*, align 8
  %21 = alloca i64*, align 8
  %22 = alloca i64*, align 8
  store i64* %0, i64** %7, align 8
  store i64* %1, i64** %8, align 8
  store i64 %2, i64* %9, align 8
  store i64* %3, i64** %10, align 8
  store i64 %4, i64* %11, align 8
  store i64 %5, i64* %12, align 8
  %23 = load i64*, i64** %10, align 8
  store i64* %23, i64** %20, align 8
  %24 = load i64, i64* %11, align 8
  %25 = add nsw i64 %24, 1
  %26 = ashr i64 %25, 1
  store i64 %26, i64* %15, align 8
  %27 = load i64*, i64** %7, align 8
  %28 = load i64, i64* %9, align 8
  %29 = getelementptr inbounds i64, i64* %27, i64 %28
  %30 = getelementptr inbounds i64, i64* %29, i64 -1
  store i64* %30, i64** %22, align 8
  %31 = load i64*, i64** %7, align 8
  %32 = load i64, i64* %15, align 8
  %33 = getelementptr inbounds i64, i64* %31, i64 %32
  %34 = getelementptr inbounds i64, i64* %33, i64 -1
  store i64* %34, i64** %18, align 8
  %35 = load i64, i64* %15, align 8
  store i64 %35, i64* %16, align 8
  store i64 0, i64* %13, align 8
  br label %36

36:                                               ; preds = %94, %6
  %37 = load i64, i64* %13, align 8
  %38 = load i64, i64* %9, align 8
  %39 = icmp slt i64 %37, %38
  br i1 %39, label %40, label %97

40:                                               ; preds = %36
  %41 = load i64*, i64** %18, align 8
  store i64* %41, i64** %19, align 8
  %42 = load i64*, i64** %20, align 8
  store i64* %42, i64** %21, align 8
  %43 = load i64*, i64** %21, align 8
  %44 = getelementptr inbounds i64, i64* %43, i32 1
  store i64* %44, i64** %21, align 8
  %45 = load i64, i64* %43, align 8
  %46 = load i64*, i64** %19, align 8
  %47 = getelementptr inbounds i64, i64* %46, i32 -1
  store i64* %47, i64** %19, align 8
  %48 = load i64, i64* %46, align 8
  %49 = mul nsw i64 %45, %48
  store i64 %49, i64* %17, align 8
  store i64 1, i64* %14, align 8
  br label %50

50:                                               ; preds = %64, %40
  %51 = load i64, i64* %14, align 8
  %52 = load i64, i64* %16, align 8
  %53 = icmp slt i64 %51, %52
  br i1 %53, label %54, label %67

54:                                               ; preds = %50
  %55 = load i64*, i64** %21, align 8
  %56 = getelementptr inbounds i64, i64* %55, i32 1
  store i64* %56, i64** %21, align 8
  %57 = load i64, i64* %55, align 8
  %58 = load i64*, i64** %19, align 8
  %59 = getelementptr inbounds i64, i64* %58, i32 -1
  store i64* %59, i64** %19, align 8
  %60 = load i64, i64* %58, align 8
  %61 = mul nsw i64 %57, %60
  %62 = load i64, i64* %17, align 8
  %63 = add nsw i64 %62, %61
  store i64 %63, i64* %17, align 8
  br label %64

64:                                               ; preds = %54
  %65 = load i64, i64* %14, align 8
  %66 = add nsw i64 %65, 1
  store i64 %66, i64* %14, align 8
  br label %50, !llvm.loop !6

67:                                               ; preds = %50
  %68 = load i64, i64* %17, align 8
  %69 = load i64, i64* %12, align 8
  %70 = sdiv i64 %68, %69
  %71 = trunc i64 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = load i64*, i64** %8, align 8
  %74 = getelementptr inbounds i64, i64* %73, i32 1
  store i64* %74, i64** %8, align 8
  store i64 %72, i64* %73, align 8
  %75 = load i64*, i64** %18, align 8
  %76 = load i64*, i64** %22, align 8
  %77 = icmp eq i64* %75, %76
  br i1 %77, label %78, label %83

78:                                               ; preds = %67
  %79 = load i64, i64* %16, align 8
  %80 = add nsw i64 %79, -1
  store i64 %80, i64* %16, align 8
  %81 = load i64*, i64** %20, align 8
  %82 = getelementptr inbounds i64, i64* %81, i32 1
  store i64* %82, i64** %20, align 8
  br label %93

83:                                               ; preds = %67
  %84 = load i64, i64* %16, align 8
  %85 = load i64, i64* %11, align 8
  %86 = icmp slt i64 %84, %85
  br i1 %86, label %87, label %90

87:                                               ; preds = %83
  %88 = load i64, i64* %16, align 8
  %89 = add nsw i64 %88, 1
  store i64 %89, i64* %16, align 8
  br label %90

90:                                               ; preds = %87, %83
  %91 = load i64*, i64** %18, align 8
  %92 = getelementptr inbounds i64, i64* %91, i32 1
  store i64* %92, i64** %18, align 8
  br label %93

93:                                               ; preds = %90, %78
  br label %94

94:                                               ; preds = %93
  %95 = load i64, i64* %13, align 8
  %96 = add nsw i64 %95, 1
  store i64 %96, i64* %13, align 8
  br label %36, !llvm.loop !8

97:                                               ; preds = %36
  ret void
}

attributes #0 = { noinline nounwind uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
